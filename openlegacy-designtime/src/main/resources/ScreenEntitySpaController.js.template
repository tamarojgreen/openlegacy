<#if entityName??>
		/*module name for controllers can be change by the user. Please, keep in mind to replace module name with
		the new one for designtime generation.		 
		*/
		
		angular.module('controllers').controller('${entityName}Ctrl',
		function($scope, $olHttp,$stateParams, $themeService, $rootScope, $state,$modal, hotkeys) {
			$scope.noTargetScreenEntityAlert = function() {
				alert('No target entity specified for table action in table class @ScreenTableActions annotation');
			}; 
			
			$scope.isReadOnly = function(data,column){
				return $rootScope.isReadOnly(data,column,$scope.model);
			}
			$scope.readOnlyCss = function(data,column){
				return $rootScope.readOnlyCss(data,column);
			}
			$scope.isActionAvailable = function(alias){
				return $rootScope.isActionAvailable(alias,$scope.model);
			};
			
			$scope.read = function(){						  
			      $olHttp.get('${entityName}/' <#if keys?size &gt; 0>+ $stateParams.${keys[0].name?replace(".", "_")}</#if> + "?children=false",
					function(data) {					    	  	
						$scope.model = data.model.entity;							
						$scope.baseUrl = olConfig.baseUrl;
						$rootScope.$broadcast("olApp:breadcrumbs", data.model.paths);
						
						setHotkeys();
						
						$scope.doActionNoTargetEntity = function(alias) {					
						    var suffix = alias != null ? "&action=" + alias : "";
							$olHttp.post('${entityName}/?children=false' + suffix, $rootScope.clearObjectsFromPost($scope.model), function(data) {
								if (data.model.entityName == '${entityName}'){											
									$scope.model = data.model.entity;
									$rootScope.$broadcast("olApp:breadcrumbs", data.model.paths);
									$rootScope.hidePreloader();
								} else {
									<#if window>																						
									$state.transitionTo($state.current, $stateParams, {
									    reload: true,
									    inherit: false,
									    notify: true
									});
									<#else>
									$state.go(data.model.entityName);
									</#if>
								}
							});
						};
						
						<#if (childEntitiesDefinitions?size > 0)>
							var tabsContent = {};						
							tabsContent["${entityName}"] = $scope.model;
							$scope.loadTab = function(entityName) {
								if (tabsContent[entityName] == null) { 
									$scope.model.actions=null;											
									$olHttp.get(entityName + '/' <#if (keys?size > 0)>+ $stateParams.${keys[0].name}</#if> + "?children=false", 
										function(data) {													
											$scope.model = data.model.entity;
											tabsContent[entityName] = data.model.entity;
											$rootScope.hidePreloader();
										});
								} else {
									$scope.model = tabsContent[entityName];
								}					
							};
						</#if>
						
						$rootScope.hidePreloader();
			    	  	<#if window>
			    	  		$rootScope.allowShowPreloader = false;
			    	  	<#else>	
			    	  		$rootScope.allowShowPreloader = true;
			    	  	</#if>
					}							
				);
			};		

			$scope.doAction = function(entityName, actionAlias) {						
				if (actionAlias == "") {
		    		var url = entityName + actionAlias;
		    	} else {
		    		var url = entityName + "?action=" + actionAlias;
		    	}  
				
				if (actionAlias.indexOf("lookup-") > -1 || ${window?string} == 'true') {
					$rootScope.showPreloader(false);
				}
				
				$olHttp.post(url,$rootScope.clearObjectsFromPost($scope.model), 
					function(data) {
						if (data == ""){
							$state.go("emulation");
							return;
						}
						if (data.model.entityName == entityName){
							$rootScope.hidePreloader();
							$scope.model = data.model.entity;								
						} else {
							if (data.model.window){
								$rootScope.modalInstance = $modal.open({
									templateUrl: $state.get(data.model.entityName).views[""].templateUrl,
									controller: $state.get(data.model.entityName).views[""].controller,										
								});
							}
							else{
								$state.go(data.model.entityName);
							}
						}
					}
				);
			};			
			<#if sortedFields?? && (sortedFields?size > 0)>
				<#list sortedFields as field>
					<#if field.fieldTypeDefinition?? && field.fieldTypeDefinition.typeName == 'fieldWithValues'>						
					$olHttp.get("${field.name?cap_first}s", function(data) {							
						$scope.${field.name}s = data.model.entity.${field.name}sRecords;							
						$scope.${field.name?cap_first}Click = function(${field.name}) {								
							$scope.model.${field.name} = ${field.name}.type;			
						}
					});
					</#if>						
				</#list>
			</#if>
			
			function setHotkeys() {
				for (var i = 0; i < $scope.model.actions.length; i++) {
					if ($scope.model.actions[i].keyboardKey != null) {
						var combo = $scope.model.actions[i].keyboardKey.split('$')[1].toLowerCase();
						hotkeys.bindTo($scope)
							.add({
								combo: combo,
								description: $scope.model.actions[i].displayName,
						        callback: function(event, hotkey) {
						        	var alias = '';
						        	for (var i = 0; i < $scope.model.actions.length; i++) {
						        		if ($scope.model.actions[i].displayName == hotkey.description) {
						        			alias = $scope.model.actions[i].alias;
						        			break;
						        		}
						        	}
						        	$scope.doAction('${entityName}', alias);
						    }
						});
					}
				}
			}
			
			$scope.read();
		});
</#if>