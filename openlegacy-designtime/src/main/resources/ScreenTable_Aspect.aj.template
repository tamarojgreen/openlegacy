// WARNING: DO NOT EDIT THIS FILE.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ${packageName};

import java.util.List;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.openlegacy.terminal.Color;
<#if supportTerminalData>
import org.openlegacy.terminal.TerminalField;
</#if>
import ${packageName}.${parentClassName}.${className};

privileged @SuppressWarnings("unused") aspect ${formattedClassName}_Aspect {

	<#assign bSelectFieldExists=false>
	<#list fields as field>
	<#if field.name == 'focusField'>
	    <#assign bSelectFieldExists=true>
	</#if>
	</#list>
	
	<#list fields as field>
	<#if supportTerminalData && !field.hasGetterField && field.primitiveType && !field.staticOrFinal>
    private TerminalField ${className}.${field.name}Field;
	</#if>
	</#list>	
    
    <#if bSelectFieldExists == false>
    private String ${formattedClassName}.focusField;
	</#if>
	
	<#list fields as field>
		<#if !field.hasGetter && !field.staticOrFinal && field.name != 'focusField'>
    public ${field.type} ${className}.get${field.name?cap_first}(){
    	return this.${field.name};
    }
		</#if>
    
		<#if (serviceInOut || (!field.hasSetter && field.editable)) && !field.staticOrFinal>
    public void ${className}.set${field.name?cap_first}(${field.type} ${field.name}){
    	this.${field.name} = ${field.name};
    }
		</#if>

		<#if supportTerminalData && !field.hasGetterField && field.primitiveType && !field.staticOrFinal>
    public TerminalField ${className}.get${field.name?cap_first}Field(){
    	return ${field.name}Field;
    }
		</#if>
	</#list>	

    <#-- Add focus() method if not present -->	
    <#if !hasMethodName('focus')>
    /**
    	Focus on the given field, or on the first field in the table if none is given
    */
    public void ${formattedClassName}.focus(String... field) {
        if (field.length > 0) {
            this.focusField = field[0];
        }<#if (fields?size > 0)> else {
            this.focusField = "${fields?first.getName()}";
        }</#if>
    }

    public String ${formattedClassName}.getFocus() {
        return focusField;
    }
    public void ${formattedClassName}.setFocus(String focus) {
        this.focusField = focus;
    }
	</#if>
		
    public int ${className}.hashCode(){
		return HashCodeBuilder.reflectionHashCode(this);
    }

    public boolean ${className}.equals(Object other){
    	// TODO exclude terminal fields
		return EqualsBuilder.reflectionEquals(this,other);
    }
}