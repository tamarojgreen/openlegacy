<#function isEntityParameter parameter>
	<#if parameter.entityDefinition?? && !parameter.fieldDefinition?? && !parameter.partEntityDefinition??>
		<#return true>
	</#if>
	<#return false>
</#function>
<#function isFieldParameter parameter>
	<#if parameter.entityDefinition?? && parameter.fieldDefinition??>
		<#return true>
	</#if>
	<#return false>
</#function>
<#function isPartParameter parameter>
	<#if parameter.partEntityDefinition??>
		<#return true>
	</#if>
	<#return false>
</#function>
<#function isTableParameter parameter>
	<#if parameter.tableDefinition??>
		<#return true>
	</#if>
	<#return false>
</#function>
<#assign addedImports = []/>
<#macro addImports parameters>
	<#assign primitiveTypes = ["byte", "byte[]", "short", "int", "long", "float", "double", "char", "boolean", "Integer", "String", "Boolean", "Long", "Double"]/>
	<#list parameters as parameter>
		<#if isTableParameter(parameter)>
			<#assign imports = [parameter.entityDefinition.packageName + "." + parameter.entityDefinition.entityClassName]/>			
			<#assign imports = imports + ["java.util.List"]/>
			<#list imports as import>
				<#if !addedImports?seq_contains(import)>
import ${import};
					<#assign addedImports = addedImports + [import]/>
				</#if>	
			</#list>				
		<#elseif isEntityParameter(parameter)>
			<#assign import = parameter.entityDefinition.packageName + "." + parameter.entityDefinition.entityClassName/>
			<#if !addedImports?seq_contains(import)>
import ${import};
				<#assign addedImports = addedImports + [import]/>
			</#if>
		<#elseif isPartParameter(parameter)>
			<#assign import = parameter.entityDefinition.packageName + "." + parameter.entityDefinition.entityClassName + "." + parameter.partEntityDefinition.partName />
			<#if !addedImports?seq_contains(import)>
import ${import};
				<#assign addedImports = addedImports + [import]/> 
			</#if>
		<#elseif isFieldParameter(parameter)>
			<#if !primitiveTypes?seq_contains(parameter.fieldDefinition.javaTypeName)>
				<#assign import = parameter.entityDefinition.packageName + "." + parameter.entityDefinition.entityClassName + "." + parameter.fieldDefinition.javaTypeName />
				<#if parameter.fieldDefinition.javaTypeName = "Date" && !addedImports?seq_contains("java.util.Date")>
import java.util.Date;
					<#assign addedImports = addedImports + ["java.util.Date"]/> 
				<#elseif parameter.fieldDefinition.javaTypeName != "Date" && !addedImports?seq_contains(import) && !parameter.fieldDefinition.manyToOneDefinition??>
import ${import};
					<#assign addedImports = addedImports + [import]/>
				<#elseif parameter.fieldDefinition.javaTypeName != "Date" && !addedImports?seq_contains(import) && parameter.fieldDefinition.manyToOneDefinition??>
					<#assign import = parameter.entityDefinition.packageName + "." + parameter.fieldDefinition.javaTypeName />
import ${import};
					<#assign addedImports = addedImports + [import]/>
				</#if>
			</#if>
		</#if>
	</#list>
</#macro>
package ${package};

import javax.jws.WebMethod;
import javax.jws.WebResult;
import javax.jws.WebService;

<@addImports parameters=inputParameters/>
<@addImports parameters=outputParameters/>

/**
 *  A service interface and input/oputput definition for a web service.
 *  Defines the contract between the client and server. The client uses the same interface for testing the service via Java code. 
 *  The interface ${serviceName}Service can be customized to enabling passing parameters to the service.     
 */

@WebService
public interface ${serviceName}Service {

	@WebMethod(operationName = "get${serviceName}")
	@WebResult(name = "${serviceName}Output")
	public ${serviceName}Out get${serviceName}(<#if inputParameters?size != 0>${serviceName}In ${serviceName?uncap_first}In</#if>);

	<#if inputParameters?size != 0>
	public static class ${serviceName}In{
		<#assign fields = []/>
		<#list inputParameters as parameter>
			<#if isTableParameter(parameter)>
				<#if !fields?seq_contains(parameter.tableDefinition.tableEntityName)>
		List<${parameter.entityDefinition.entityName}.${parameter.tableDefinition.tableEntityName}> ${parameter.tableDefinition.tableEntityName?uncap_first}s;
						<#assign fields = fields + [parameter.tableDefinition.tableEntityName]/>
				</#if>
			<#elseif isEntityParameter(parameter)>
				<#if !fields?seq_contains(parameter.entityDefinition.entityName)>
		${parameter.entityDefinition.entityName} ${parameter.entityDefinition.entityName?uncap_first};
					<#assign fields = fields + [parameter.entityDefinition.entityName]/>
				</#if>
			<#elseif isPartParameter(parameter)>
				<#if !fields?seq_contains(parameter.partEntityDefinition.partName)>
		${parameter.partEntityDefinition.partName} ${parameter.partEntityDefinition.partName?uncap_first};
					<#assign fields = fields + [parameter.partEntityDefinition.partName]/>
				</#if>
			<#elseif isFieldParameter(parameter)>
				<#assign fieldName = parameter.fieldDefinition.name?cap_first/>
				<#assign fieldNames = fieldName?split(".")/>
				<#if fieldNames?is_sequence && (fieldNames?size > 1)>
					<#assign fieldName = fieldNames[1]?cap_first/>
				</#if>
				<#if !fields?seq_contains(fieldName)>
		${parameter.fieldDefinition.javaTypeName} ${fieldName?uncap_first};
					<#assign fields = fields + [fieldName]/>
				</#if>
			</#if>
		</#list>
		
		<#assign getters = []/>
		<#list inputParameters as parameter>
			<#if isTableParameter(parameter)>
				<#assign getter = "get" + parameter.tableDefinition.tableEntityName?cap_first + "s"/>
				<#if !getters?seq_contains(getter)>
		public List<${parameter.entityDefinition.entityName}.${parameter.tableDefinition.tableEntityName}> ${getter}(){
			return ${parameter.tableDefinition.tableEntityName?uncap_first}s;
		}
					<#assign getters = getters + [getter]/>
				</#if>
			<#elseif isEntityParameter(parameter)>
				<#assign getter = "get" + parameter.entityDefinition.entityName?cap_first/>
				<#if !getters?seq_contains(getter)>
		public ${parameter.entityDefinition.entityName} ${getter}(){
			return ${parameter.entityDefinition.entityName?uncap_first};
		} 
					<#assign getters = getters + [getter]/>
				</#if>
			<#elseif isPartParameter(parameter)>
				<#assign getter = "get" + parameter.partEntityDefinition.partName?cap_first/>
				<#if !getters?seq_contains(getter)>
		public ${parameter.partEntityDefinition.partName} ${getter}(){
			return ${parameter.partEntityDefinition.partName?uncap_first};
		}
					<#assign getters = getters + [getter]/>
				</#if>
			<#elseif isFieldParameter(parameter)>
				<#assign fieldName = parameter.fieldDefinition.name?cap_first/>
				<#assign fieldNames = fieldName?split(".")/>
				<#if fieldNames?is_sequence && (fieldNames?size > 1)>
					<#assign fieldName = fieldNames[1]?cap_first/>
				</#if>
				<#assign getter = "get" + fieldName?cap_first/>
				<#if !getters?seq_contains(getter)>
		public ${parameter.fieldDefinition.javaTypeName} ${getter}(){
			return ${fieldName?uncap_first};
		}
		
		public void set${fieldName?cap_first}(${parameter.fieldDefinition.javaTypeName} ${fieldName?uncap_first}){
			this.${fieldName?uncap_first} = ${fieldName?uncap_first};
		}
					<#assign getters = getters + [getter]/>
				</#if>
			</#if>

		</#list>
	}
	</#if>
	public static class ${serviceName}Out{
		<#assign fields = []/>
		<#list outputParameters as parameter>
			<#if isTableParameter(parameter)>			
					<#if !fields?seq_contains(parameter.tableDefinition.tableEntityName?uncap_first + "s")>				
			List<${parameter.entityDefinition.entityName}.${parameter.tableDefinition.tableEntityName}> ${parameter.tableDefinition.tableEntityName?uncap_first}s;
						<#assign fields = fields + [parameter.tableDefinition.tableEntityName?uncap_first + "s"]/>
					</#if>	
			
			<#elseif isPartParameter(parameter)>			
				<#if !fields?seq_contains(parameter.partEntityDefinition.partName)>
		${parameter.partEntityDefinition.partName} ${parameter.partEntityDefinition.partName?uncap_first};
					<#assign fields = fields + [parameter.partEntityDefinition.partName]/>
				</#if>
			<#elseif isEntityParameter(parameter)>			
				<#if !fields?seq_contains(parameter.entityDefinition.entityName)>
		${parameter.entityDefinition.entityName} ${parameter.entityDefinition.entityName?uncap_first};
					<#assign fields = fields + [parameter.entityDefinition.entityName]/>
				</#if>
			<#elseif isFieldParameter(parameter)>
				<#assign fieldName = parameter.fieldDefinition.name?cap_first/>
				<#assign fieldNames = fieldName?split(".")/>
				<#if fieldNames?is_sequence && (fieldNames?size > 1)>
					<#assign fieldName = fieldNames[1]?cap_first/>
				</#if>
				<#if !fields?seq_contains(fieldName)>
		${parameter.fieldDefinition.javaTypeName} ${fieldName?uncap_first};
					<#assign fields = fields + [fieldName]/>
				</#if>
			</#if>
		</#list>

		<#assign gettersSetters = []/>
		<#list outputParameters as parameter>
			<#if isTableParameter(parameter)>			
					<#assign tableName = parameter.tableDefinition.tableEntityName />
						<#assign getter = "get" + tableName?cap_first + "s"/>
						<#if !gettersSetters?seq_contains(getter)>
						
		public List<${parameter.entityDefinition.entityName}.${tableName?cap_first}> ${getter}(){
			return this.${tableName?uncap_first}s;
		}
		
		public void set${tableName?cap_first}s(List<${parameter.entityDefinition.entityName}.${tableName?cap_first}> ${tableName?uncap_first}s){
			this.${tableName?uncap_first}s = ${tableName?uncap_first}s;
		}
							<#assign gettersSetters = gettersSetters + [getter]/>
					</#if>			
			<#elseif isPartParameter(parameter)>
				<#assign partName = parameter.partEntityDefinition.partName />
				<#assign getter = "get" + partName?cap_first/>
				<#if !gettersSetters?seq_contains(getter)>
				
		public ${partName?cap_first} ${getter}(){
			return ${partName?uncap_first};
		}
		
		public void set${partName?cap_first}(${partName?cap_first} ${partName?uncap_first}){
			this.${partName?uncap_first} = ${partName?uncap_first};
		}
					<#assign gettersSetters = gettersSetters + [getter]/>
				</#if>
			
			<#elseif isFieldParameter(parameter)>
				<#assign fieldName = parameter.fieldDefinition.name?cap_first/>
				<#assign fieldNames = fieldName?split(".")/>
				<#if fieldNames?is_sequence && (fieldNames?size > 1)>
					<#assign fieldName = fieldNames[1]?cap_first/>
				</#if>
				<#assign getter = "get" + fieldName?cap_first/>
				<#if !gettersSetters?seq_contains(getter)>
				
		public ${parameter.fieldDefinition.javaTypeName} ${getter}(){
			return ${fieldName?uncap_first};
		}
		
		public void set${fieldName?cap_first}(${parameter.fieldDefinition.javaTypeName} ${fieldName?uncap_first}){
			this.${fieldName?uncap_first} = ${fieldName?uncap_first};
		}
					<#assign gettersSetters = gettersSetters + [getter]/>
				</#if>
			<#elseif isEntityParameter(parameter)>
				<#assign entityName = parameter.entityDefinition.entityName/>
				<#assign getter = "get" + entityName?cap_first/>
				<#if !gettersSetters?seq_contains(getter)>
				
		public ${entityName?cap_first} ${getter}(){
			return ${entityName?uncap_first};
		}
		
		public void set${entityName?cap_first}(${entityName?cap_first} ${entityName?uncap_first}){
			this.${entityName?uncap_first} = ${entityName?uncap_first};
		}
					<#assign gettersSetters = gettersSetters + [getter]/>
				</#if>
			</#if>
		</#list>
	}
}
