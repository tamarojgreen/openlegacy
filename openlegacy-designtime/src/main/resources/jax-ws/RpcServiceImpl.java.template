<#function isEntityParameter parameter>
	<#if parameter.entityDefinition?? && !parameter.fieldDefinition?? && !parameter.partEntityDefinition??>
		<#return true>
	</#if>
	<#return false>
</#function>
<#function isFieldParameter parameter>
	<#if parameter.entityDefinition?? && parameter.fieldDefinition??>
		<#return true>
	</#if>
	<#return false>
</#function>
<#function isPartParameter parameter>
	<#if parameter.partEntityDefinition??>
		<#return true>
	</#if>
	<#return false>
</#function>
package ${package};

<#if inputParameters?size != 0 || outputParameters?size != 0>
import org.openlegacy.rpc.RpcEntity;
</#if>

import org.openlegacy.rpc.RpcSession;
import org.openlegacy.modules.login.Login;
<#if generatePool>
import org.openlegacy.rpc.RpcSessionFactory;
import org.openlegacy.rpc.actions.RpcActions;
import org.springframework.beans.factory.annotation.Qualifier;
</#if>
import javax.inject.Inject;

import javax.jws.WebService;

<#assign addedImports = []/>
<#list inputParameters as parameter>
	<#if parameter.entityDefinition??>
		<#assign import = parameter.entityDefinition.packageName + "." + parameter.entityDefinition.entityClassName/>
		<#if !addedImports?seq_contains(import)>
import ${import};
			<#assign addedImports = addedImports + [import]/> 
		</#if>
	</#if>
</#list>

<#list outputParameters as parameter>
	<#if parameter.entityDefinition??>
		<#assign import = parameter.entityDefinition.packageName + "." + parameter.entityDefinition.entityClassName/>
		<#if !addedImports?seq_contains(import)>
import ${import}; 
			<#assign addedImports = addedImports + [import]/> 
		</#if> 
	</#if>
</#list>

<#if inputParameters?size != 0 || outputParameters?size != 0>
	<#if !generatePool>
import org.openlegacy.rpc.actions.RpcActions;
	</#if>
//import org.openlegacy.terminal.wait_conditions.WaitCondition;
</#if>

/**
 *  A service implementation which invokes OpenLegacy API, and returns a service output.
 *  The code below should be customize to perform a working scenario which goes through the relevant screens.
 *  Can be tested by invoking the test ${serviceName}ServiceTest.
 *  The interface ${serviceName}Service can be customized to enabling passing parameters to the service, and this class can consume the parameters within the relavant screens.    
 */
@WebService(endpointInterface = "${package}.${serviceName}Service")
public class ${serviceName}ServiceImpl implements ${serviceName}Service {

	<#if generatePool>
	@Inject
	@Qualifier("${serviceName?uncap_first}Pool")
	private RpcSessionFactory rpcSessionFactory;
	<#else>
	@Inject
	private RpcSession rpcSession;
	</#if>

	@Override
	public ${serviceName}Out get${serviceName}(<#if inputParameters?size != 0>${serviceName}In ${serviceName?uncap_first}In</#if>) {

		<#if generatePool>
		RpcSession rpcSession = rpcSessionFactory.getSession();		
		</#if>
		try{
			<#if !generatePool>
			rpcSession.getModule(Login.class).login("USER","PASSWORD");
			</#if>
			<#assign addedEntities = [] />
			<#list inputParameters as parameter>
				<#if parameter.entityDefinition??>
					<#assign entityName = parameter.entityDefinition.entityName/>
					<#if !addedEntities?seq_contains(entityName)>
						<#assign addedEntities = addedEntities + [entityName]/>
					</#if>
				</#if>
		
				<#assign fieldName = parameter.fieldDefinition.name?cap_first/>
				<#assign entityName = parameter.entityDefinition.entityName/>
				<#if isFieldParameter(parameter)>
					<#if isPartParameter(parameter)>
						<#assign partName = parameter.partEntityDefinition.partName?cap_first/>
						${entityName} ${entityName?uncap_first} = rpcSession.getEntity(${entityName}.class, ${serviceName?uncap_first}In.get${fieldName?cap_first}(), ${serviceName?uncap_first}In.get${partName}());
					<#else>
						${entityName} ${entityName?uncap_first} = rpcSession.getEntity(${entityName}.class, ${serviceName?uncap_first}In.get${fieldName?cap_first}());
					</#if>
					<#assign fieldNames = fieldName?split(".")/>
					<#if fieldNames?is_sequence && (fieldNames?size > 1)>
						<#assign fieldName = fieldNames[1]/>
					</#if>
				<#else>
					${entityName} ${entityName?uncap_first} = rpcSession.getEntity(${entityName}.class);
				</#if>
			</#list>
			
			${serviceName}Out ${serviceName?uncap_first}Out = new ${serviceName}Out();
			<#list outputParameters as parameter>
				<#if parameter.entityDefinition??>
					<#assign entityName = parameter.entityDefinition.entityName/>
					<#if !addedEntities?seq_contains(entityName)>
					
			${entityName?cap_first} ${entityName?uncap_first} = rpcSession.getEntity(${entityName?cap_first}.class);
						<#assign addedEntities = addedEntities + [entityName]/>
					</#if>
				</#if>
				<#if isEntityParameter(parameter)>
					<#assign entityName = parameter.entityDefinition.entityName/>
			${serviceName?uncap_first}Out.set${entityName?cap_first}(${entityName?uncap_first});
				</#if>
				<#if isFieldParameter(parameter)>
					<#assign entityName = parameter.entityDefinition.entityName/>
					<#assign fieldName = parameter.fieldDefinition.name?cap_first/>
					<#assign fieldNames = fieldName?split(".")/>
					<#if !addedEntities?seq_contains(entityName)>
			${entityName?cap_first} ${entityName?uncap_first} = rpcSession.getEntity(${entityName?cap_first}.class);
						<#assign addedEntities = addedEntities + [entityName]/>
					</#if>
					<#if fieldNames?is_sequence && (fieldNames?size > 1)>
						<#assign fieldName = fieldNames[1]/>
			${serviceName?uncap_first}Out.set${fieldName?cap_first}(${entityName?uncap_first}.get${fieldNames[0]?cap_first}().get${fieldName?cap_first}());
					<#else>
			${serviceName?uncap_first}Out.set${fieldName?cap_first}(${entityName?uncap_first}.get${fieldName?cap_first}());
					</#if>
				</#if>
				<#if isPartParameter(parameter)>
					<#assign entityName = parameter.entityDefinition.entityName/>
					<#assign partName = parameter.partEntityDefinition.partName?cap_first/>
					<#if !addedEntities?seq_contains(entityName)>
			${entityName?cap_first} ${entityName?uncap_first} = rpcSession.getEntity(${entityName?cap_first}.class);
						<#assign addedEntities = addedEntities + [entityName]/>
					</#if>
			${serviceName?uncap_first}Out.set${partName?cap_first}(${entityName?uncap_first}.get${partName?cap_first}());
				</#if>
			</#list>

			return ${serviceName?uncap_first}Out;
		<#if generatePool>
		} catch(RuntimeException e){
			rpcSession.disconnect();
			throw(e);
		</#if>
		} finally {
		<#if generatePool>
			rpcSessionFactory.returnSession(rpcSession);
		<#else>
			rpcSession.disconnect();
		</#if>
		}
	}

}
