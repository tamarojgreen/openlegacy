package ${packageName};

import org.openlegacy.annotations.screen.*;
<#if actions?size != 0>
import org.openlegacy.terminal.actions.TerminalActions;
import org.openlegacy.terminal.actions.TerminalAction.AdditionalKey;
</#if>
<#if tableDefinitions?size != 0>
import java.util.List;
import org.openlegacy.annotations.screen.ScreenTable;
</#if>
<#list referredClasses as referredClass> 
import ${referredClass};  
</#list>
<#list sortedFields as field>
	<#if field.fieldTypeDefinition?? && field.fieldTypeDefinition.typeName = "enum">
import org.openlegacy.definitions.EnumGetValue;
		<#break>
	</#if>
</#list>

<#-- TODO find a nicer way to generate "," properly when 2 attributes exists -->
@ScreenEntity(<#if window>window=true, rows= ${screenSize.rows}, columns= ${screenSize.columns}</#if><#if window && type??>,</#if><#if type??>screenType=${type.simpleName}.class</#if><#if child && (window || type??)>,</#if><#if child>child=true</#if><#if (window || type??) && displayName??>,</#if><#if displayName??>displayName="${displayName}"</#if><#if rightToLeft>, rightToLeft = true</#if>)
@ScreenIdentifiers(identifiers = { 
				<#list screenIdentification.screenIdentifiers as identifier> 
				@Identifier(row = ${identifier.position.row}, column = ${identifier.position.column}, value = "${identifier.text}")<#if identifier_has_next>,</#if> 
				</#list>	
				})
<#if actions?size != 0>
@ScreenActions(actions = { 
				<#list actions as action> 
				@Action(action = TerminalActions.${action.action.class.simpleName}.class<#if action.additionalKey??> ,additionalKey= AdditionalKey.${action.additionalKey}</#if>, displayName = "${action.displayName}", alias = "${action.alias}")<#if action_has_next>,</#if> 
				</#list>	
				})
</#if>
<#if navigationDefinition?? && navigationDefinition.accessedFromEntityDefinition?? && navigationDefinition.accessedFromEntityDefinition.entityName??>
@ScreenNavigation(accessedFrom = ${navigationDefinition.accessedFromEntityDefinition.entityName}.class 
					<#if navigationDefinition.terminalAction??>, terminalAction=TerminalActions.${navigationDefinition.terminalAction.class.simpleName}.class <#if navigationDefinition.terminalAction.additionalKey??>, additionalKey=AdditionalKey.${navigationDefinition.terminalAction.additionalKey}</#if></#if><#if navigationDefinition.drilldownValue??>, drilldownValue="${navigationDefinition.drilldownValue}"</#if><#if navigationDefinition.requiresParameters>, requiresParameters=true</#if><#if navigationDefinition.assignedFields?size != 0>, assignedFields = { <#list navigationDefinition.assignedFields as field>
					@AssignedField(field = "${field.name}"<#if field.value??>, value = "${field.value}"</#if>)<#if field_has_next>,</#if>
					</#list> }						
					</#if>)
</#if>
<#if generateAspect = false>
 public class ${entityName} implements org.openlegacy.terminal.ScreenEntity {
 
 	private String focusField;
 <#else>
public class ${entityName} {
    
</#if>
	<#list sortedFields as field>
	
	<@fieldTypes field=field />
	@ScreenField(<#if field.key>key = true, </#if>row = ${field.position.row}, column = ${field.position.column}<#if field.length &gt; 0>, endColumn= ${field.endPosition.column}</#if><#if field.labelPosition??> ,labelColumn= ${field.labelPosition.column}</#if><#if field.password> ,password= true</#if><#if field.editable> ,editable= true</#if><#if field.multyLine> ,endRow= ${field.endPosition.row}</#if><#if field.rectangle> ,rectangle= true</#if><#if field.type??> ,fieldType=${field.type.simpleName}.class</#if><#if field.displayName??> ,displayName = "${field.displayName}"</#if><#if field.sampleValue?? && field.sampleValue != "">, sampleValue = "${field.sampleValue}"</#if><#if field.helpText?? && field.helpText != "">, helpText = "${field.helpText}"</#if>)
		<#if field.fieldTypeDefinition?? && field.fieldTypeDefinition.typeName = "enum">
	private ${field.name?cap_first} ${field.name?uncap_first};
		<#else>
    private ${field.javaTypeName} ${field.name?uncap_first};
    	</#if>
	</#list>	

    <#if generateAspect = false>
	public String getFocusField(){
    	return focusField;
    }
    public void setFocusField(String focusField){
    	this.focusField = focusField;
    }
	<#list sortedFields as field>
    
    public ${field.javaTypeName} get${field.name?cap_first}(){
    	return this.${field.name};
    }
    
    <#if field.editable>
    public void set${field.name?cap_first}( ${field.javaTypeName} ${field.name}){
    	this.${field.name} = ${field.name};
    }
    </#if >
	</#list>	
    </#if>

 	<#list childEntitiesDefinitions as childScreen>
 	<#if childScreen?? && childScreen.entityName??>
    private ${childScreen.entityName} ${childScreen.entityName?uncap_first};
    <#if generateAspect = false>
    public ${childScreen.entityName} get${childScreen.entityName?cap_first}(){
    	return this.${childScreen.entityName?uncap_first};
    }
 	</#if>
	</#if>
	</#list>	
    
	<#assign tableNames = tableDefinitions?keys>
	<#list tableNames as tableName>
	<#assign table = tableDefinitions[tableName]>
    private List<${table.tableEntityName}> ${table.tableEntityName?uncap_first}s;
    <#if generateAspect = false> 
    
	public List<${table.tableEntityName}> get${table.tableEntityName?cap_first}s(){
		return this.${table.tableEntityName?uncap_first}s;
	}
    </#if> 
	</#list>	


	<#assign tableNames = tableDefinitions?keys>
	<#list tableNames as tableName>
	<#assign table = tableDefinitions[tableName]>
	@ScreenTable(startRow = ${table.startRow}, endRow = ${table.endRow})
	<#if table.actions?size &gt; 0>
	@ScreenTableActions(actions = { 
		<#list table.actions as action>
			@TableAction(actionValue = "${action.action.actionValue}", displayName = "${action.displayName}"<#if action.targetEntityDefinition??>, targetEntity=${action.targetEntityDefinition.entityName}.class</#if><#if action_index = 0>, defaultAction = true</#if>)<#if action_has_next>,</#if> 
		</#list>
			})
	</#if>
	public static class ${table.tableEntityName} {
		<#list table.columnDefinitions as column>
		@ScreenColumn(startColumn = ${column.startColumn}, endColumn = ${column.endColumn}<#if column.editable>, editable=true</#if><#if column.key>, key=true</#if><#if table.mainDisplayFields?seq_contains(column.name)>, mainDisplayField=true</#if><#if column.selectionField>, selectionField=true</#if><#if column.displayName != ""> ,displayName = "${column.displayName}"</#if><#if column.sampleValue != "">, sampleValue="${column.sampleValue}"</#if>)
		private ${column.javaTypeName} ${column.name};
		<#if generateAspect = false> 
    
	    public ${column.javaTypeName} get${column.name?cap_first}(){
		     return this.${column.name};
	    }
	   
	    <#if column.editable>
	    public void set${column.name?cap_first}(${column.javaTypeName} ${column.name} ) {
	    	this.${column.name} = ${column.name};
	    }
	    
	    </#if> 
	    </#if> 
		</#list>
		
		
	}    
	</#list>	
 
	<#list sortedFields as field>
		<#if field.fieldTypeDefinition?? && field.fieldTypeDefinition.typeName = "enum">
	public enum ${field.name?cap_first} implements EnumGetValue{
		<#assign enumMap = field.fieldTypeDefinition.enums>
		<#assign enumKeys = enumMap?keys>
		<#list enumKeys as enumKey>
			${enumKey?cap_first}("${enumMap[enumKey].value}","${enumMap[enumKey].display}")<#if enumKey_has_next>,</#if>
		</#list>
		;
		private String value;
		private String display;

		${field.name?cap_first}(String value, String display) {
			this.value = value;
			this.display = display;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return display;
		}
	}
		</#if>
	</#list>	
}
<#macro fieldTypes field>
	<#if field.fieldTypeDefinition??>
		<#switch field.fieldTypeDefinition.typeName>
		  <#case "boolean">
	@ScreenBooleanField(trueValue="${field.fieldTypeDefinition.trueValue}",falseValue="${field.fieldTypeDefinition.falseValue}")
		     <#break>
		  <#case "fieldWithValues">
	@ScreenFieldValues(sourceScreenEntity=${field.fieldTypeDefinition.sourceEntityDefinition.entityName}.class,collectAll=false)
		     <#break>
		  <#case "date">
	@ScreenDateField(dayColumn=${field.fieldTypeDefinition.dayColumn}, monthColumn=${field.fieldTypeDefinition.monthColumn}, yearColumn=${field.fieldTypeDefinition.yearColumn})
		     <#break>
		  <#case "number">
	@ScreenNumericField
		     <#break>
		  <#default>
		</#switch>  
	</#if>
</#macro>
