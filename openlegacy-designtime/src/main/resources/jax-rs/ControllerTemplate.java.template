<#function isEntityParameter parameter>
	<#if parameter.entityDefinition?? && !parameter.fieldDefinition?? && !parameter.partEntityDefinition??>
		<#return true>
	</#if>
	<#return false>
</#function>
<#function isFieldParameter parameter>
	<#if parameter.entityDefinition?? && parameter.fieldDefinition??>
		<#return true>
	</#if>
	<#return false>
</#function>
<#function isPartParameter parameter>
	<#if parameter.partEntityDefinition??>
		<#return true>
	</#if>
	<#return false>
</#function>

<#assign addedImports = []/>
<#macro addImports parameters>
	<#assign primitiveTypes = ["byte", "byte[]", "short", "int", "long", "float", "double", "char", "boolean", "Integer", "String", "Boolean", "Long", "Double"]/>
	<#list parameters as parameter>
		<#if isEntityParameter(parameter)>
			<#assign import = parameter.entityDefinition.packageName + "." + parameter.entityDefinition.entityClassName/>
			<#if !addedImports?seq_contains(import)>
import ${import};
				<#assign addedImports = addedImports + [import]/>
			</#if>
		<#elseif isPartParameter(parameter)>
			<#assign import = parameter.entityDefinition.packageName + "." + parameter.entityDefinition.entityClassName + "." + parameter.partEntityDefinition.partName />
			<#if !addedImports?seq_contains(import)>
import ${import};
				<#assign addedImports = addedImports + [import]/> 
			</#if>
		<#elseif isFieldParameter(parameter)>
			<#if !primitiveTypes?seq_contains(parameter.fieldDefinition.javaTypeName)>
				<#assign import = parameter.entityDefinition.packageName + "." + parameter.entityDefinition.entityClassName + "." + parameter.fieldDefinition.javaTypeName />
				<#if parameter.fieldDefinition.javaTypeName = "Date" && !addedImports?seq_contains("java.util.Date")>
import java.util.Date;
					<#assign addedImports = addedImports + ["java.util.Date"]/> 
				<#elseif parameter.fieldDefinition.javaTypeName != "Date" && !addedImports?seq_contains(import) && !parameter.fieldDefinition.manyToOneDefinition??>
import ${import};
					<#assign addedImports = addedImports + [import]/>
				<#elseif parameter.fieldDefinition.javaTypeName != "Date" && !addedImports?seq_contains(import) && parameter.fieldDefinition.manyToOneDefinition??>
					<#assign import = parameter.entityDefinition.packageName + "." + parameter.fieldDefinition.javaTypeName />
import ${import};
					<#assign addedImports = addedImports + [import]/>
				</#if>
			</#if>
		</#if>
	</#list>
</#macro>

package ${package}.controllers;

import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
<#if inputParameters?size != 0>
import javax.ws.rs.POST;
import javax.ws.rs.QueryParam;
</#if>
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.springframework.stereotype.Component;

import ${package}.${serviceName}Service;
import ${package}.${serviceName}Service.*;

<@addImports parameters=inputParameters/>
<@addImports parameters=outputParameters/>

@Component
@Path("/${serviceName?lower_case}")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class ${serviceName}Controller {

	@Inject
	private ${serviceName}Service ${serviceName?uncap_first}Service;

	<#assign getMethodArgs = "" />
	<#list inputParameters as parameter>
		<#if isFieldParameter(parameter)>
			<#assign fieldName = parameter.fieldDefinition.name?cap_first/>
			<#assign fieldNames = fieldName?split(".")/>
			<#if fieldNames?is_sequence && (fieldNames?size > 1)>
				<#assign fieldName = fieldNames[1]?cap_first/>
			</#if>
			<#assign getMethodArgs = getMethodArgs + "@QueryParam(value=\"${fieldName?uncap_first}\") ${parameter.fieldDefinition.javaTypeName} ${fieldName?uncap_first}"/>
			<#if parameter_has_next>
				<#assign getMethodArgs = getMethodArgs + ", "/>
			</#if>
		</#if>
	</#list>
	@GET
	public Response get${serviceName}(${getMethodArgs}) {
		<#if inputParameters?size != 0 >
		${serviceName}In ${serviceName?uncap_first}In = new ${serviceName}In();
			<#list inputParameters as parameter>
				<#if isFieldParameter(parameter)>
					<#assign fieldName = parameter.fieldDefinition.name?cap_first/>
					<#assign fieldNames = fieldName?split(".")/>
					<#if fieldNames?is_sequence && (fieldNames?size > 1)>
						<#assign fieldName = fieldNames[1]?cap_first/>
					</#if>
		${serviceName?uncap_first}In.set${fieldName}(${fieldName?uncap_first});
				</#if>
			</#list>
		${serviceName}Out ${serviceName?uncap_first}Out = ${serviceName?uncap_first}Service.get${serviceName}(${serviceName?uncap_first}In);
		<#else>
		${serviceName}Out ${serviceName?uncap_first}Out = ${serviceName?uncap_first}Service.get${serviceName}();
		</#if>
		return Response.status(200).entity(${serviceName?uncap_first}Out).build();
	}
	
	<#if inputParameters?size != 0 >
	@POST
	public Response post${serviceName}(${serviceName}In ${serviceName?uncap_first}In) {
		${serviceName}Out ${serviceName?uncap_first}Out = ${serviceName?uncap_first}Service.get${serviceName}(${serviceName?uncap_first}In);
		return Response.status(200).entity(${serviceName?uncap_first}Out).build();
	}
	</#if>
}
