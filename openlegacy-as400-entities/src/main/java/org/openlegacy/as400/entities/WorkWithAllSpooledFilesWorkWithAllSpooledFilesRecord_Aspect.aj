// WARNING: DO NOT EDIT THIS FILE.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.openlegacy.as400.entities;

import java.util.List;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.openlegacy.as400.entities.WorkWithAllSpooledFiles.WorkWithAllSpooledFilesRecord;

privileged @SuppressWarnings("unused") aspect WorkWithAllSpooledFilesRecord_Aspect {

	
    
    private String WorkWithAllSpooledFilesRecord.focusField;
	
    public String WorkWithAllSpooledFilesRecord.getFile(){
    	return this.file;
    }
    

    public String WorkWithAllSpooledFilesRecord.getUser(){
    	return this.user;
    }
    

    public String WorkWithAllSpooledFilesRecord.getQueue(){
    	return this.queue;
    }
    

    public String WorkWithAllSpooledFilesRecord.getUserData(){
    	return this.userData;
    }
    

    public String WorkWithAllSpooledFilesRecord.getSts(){
    	return this.sts;
    }
    

    public Integer WorkWithAllSpooledFilesRecord.getPages(){
    	return this.pages;
    }
    

    public Integer WorkWithAllSpooledFilesRecord.getCopy(){
    	return this.copy;
    }
    

    public String WorkWithAllSpooledFilesRecord.getNewColumn(){
    	return this.newColumn;
    }
    

    public String WorkWithAllSpooledFilesRecord.getOpt(){
    	return this.opt;
    }
    
    public void WorkWithAllSpooledFilesRecord.setOpt(String opt){
    	this.opt = opt;
    }


    /**
    	Focus on the given field, or on the first field in the table if none is given
    */
    public void WorkWithAllSpooledFilesRecord.focus(String... field) {
        if (field.length > 0) {
            this.focusField = field[0];
        } else {
            this.focusField = "file";
        }
    }

    public String WorkWithAllSpooledFilesRecord.getFocus() {
        return focusField;
    }
    public void WorkWithAllSpooledFilesRecord.setFocus(String focus) {
        this.focusField = focus;
    }
		
    public int WorkWithAllSpooledFilesRecord.hashCode(){
		return HashCodeBuilder.reflectionHashCode(this);
    }

    public boolean WorkWithAllSpooledFilesRecord.equals(Object other){
    	// TODO exclude terminal fields
		return EqualsBuilder.reflectionEquals(this,other);
    }
}