/*******************************************************************************
 * Copyright (c) 2014 OpenLegacy Inc.
 * All rights reserved. This program and the accompanying materials 
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     OpenLegacy Inc. - initial API and implementation
 *******************************************************************************/
package org.openlegacy.db.loaders.support;

import org.openlegacy.EntitiesRegistry;
import org.openlegacy.FieldType;
import org.openlegacy.db.definitions.DbEntityDefinition;
import org.openlegacy.db.definitions.DbFieldDefinition;
import org.openlegacy.db.definitions.SimpleDbColumnFieldDefinition;
import org.openlegacy.db.definitions.SimpleDbFieldDefinition;
import org.openlegacy.db.services.DbEntitiesRegistry;
import org.openlegacy.loaders.FieldLoader;
import org.openlegacy.utils.StringUtil;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;

import javax.persistence.GeneratedValue;
import javax.persistence.Id;

@Component
@Order(1)
public class DbFieldsLoader implements FieldLoader {

	@Override
	@SuppressWarnings("rawtypes")
	public boolean match(EntitiesRegistry entitiesRegistry, Field field) {
		return true;
	}

	@Override
	@SuppressWarnings("rawtypes")
	public void load(EntitiesRegistry entitiesRegistry, Field field, Class<?> containingClass, int fieldOrder) {
		DbEntitiesRegistry dbEntitiesRegistry = (DbEntitiesRegistry) entitiesRegistry;

		DbEntityDefinition dbEntityDefinition = dbEntitiesRegistry.get(containingClass);

		if (dbEntityDefinition != null) {
			SimpleDbFieldDefinition dbFieldDefinition = new SimpleDbFieldDefinition(field.getName());
			dbFieldDefinition.setDisplayName(StringUtil.toDisplayName(field.getName()));
			dbFieldDefinition.setKey(field.getAnnotation(Id.class) != null);

			if (field.getAnnotation(GeneratedValue.class) != null) {
				dbFieldDefinition.setKeyAutoGenerated(true);
			}
			if (Modifier.isStatic(field.getModifiers())) {
				dbFieldDefinition.setStaticField(true);
			}

			dbEntityDefinition.getFieldsDefinitions().put(field.getName(), dbFieldDefinition);
			DbFieldDefinition columnFieldDefinition = dbEntityDefinition.getColumnFieldsDefinitions().get(field.getName());
			if (columnFieldDefinition == null) {
				columnFieldDefinition = createFrom(field, dbFieldDefinition);
				setJavaType(field, (SimpleDbColumnFieldDefinition) columnFieldDefinition);
				dbEntityDefinition.getColumnFieldsDefinitions().put(field.getName(), columnFieldDefinition);
			} else {
				((SimpleDbColumnFieldDefinition) columnFieldDefinition).setKey(dbFieldDefinition.isKey());
				((SimpleDbColumnFieldDefinition) columnFieldDefinition).setKeyAutoGenerated(dbFieldDefinition.isKeyAutoGenerated());
				((SimpleDbColumnFieldDefinition) columnFieldDefinition).setStaticField(dbFieldDefinition.isStaticField());
				setJavaType(field, (SimpleDbColumnFieldDefinition) columnFieldDefinition);
			}
		}
	}

	protected SimpleDbColumnFieldDefinition createFrom(Field field, SimpleDbFieldDefinition fieldDefinition) {
		SimpleDbColumnFieldDefinition dbFieldDefinition = new SimpleDbColumnFieldDefinition(field.getName(),
				FieldType.General.class);
		if (fieldDefinition != null) {
			dbFieldDefinition = new SimpleDbColumnFieldDefinition(field.getName(), FieldType.General.class);
			dbFieldDefinition.setDisplayName(fieldDefinition.getDisplayName());
			dbFieldDefinition.setKey(fieldDefinition.isKey());
			dbFieldDefinition.setKeyAutoGenerated(fieldDefinition.isKeyAutoGenerated());
			dbFieldDefinition.setStaticField(fieldDefinition.isStaticField());
		}
		return dbFieldDefinition;
	}

	void setJavaType(Field field, SimpleDbColumnFieldDefinition columnFieldDefinition) {
		Type genericFieldType = field.getGenericType();

		if (genericFieldType instanceof ParameterizedType) {
			ParameterizedType aType = (ParameterizedType) genericFieldType;
			Type[] fieldArgTypes = aType.getActualTypeArguments();
			columnFieldDefinition.setJavaType((Class<?>) fieldArgTypes[fieldArgTypes.length - 1]);
			columnFieldDefinition.setJavaTypeName(((Class<?>) fieldArgTypes[fieldArgTypes.length - 1]).getSimpleName());
		} else {
			columnFieldDefinition.setJavaType(field.getType());
			columnFieldDefinition.setJavaTypeName(field.getType().getSimpleName());
		}

	}

}
